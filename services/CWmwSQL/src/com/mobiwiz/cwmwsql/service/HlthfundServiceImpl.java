/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Hlthfund;


/**
 * ServiceImpl object for domain model class Hlthfund.
 *
 * @see Hlthfund
 */
@Service("CWmwSQL.HlthfundService")
@Validated
public class HlthfundServiceImpl implements HlthfundService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HlthfundServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.HlthfundDao")
    private WMGenericDao<Hlthfund, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Hlthfund, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Hlthfund create(Hlthfund hlthfund) {
        LOGGER.debug("Creating a new Hlthfund with information: {}", hlthfund);

        Hlthfund hlthfundCreated = this.wmGenericDao.create(hlthfund);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(hlthfundCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Hlthfund getById(String hlthfundId) {
        LOGGER.debug("Finding Hlthfund by id: {}", hlthfundId);
        return this.wmGenericDao.findById(hlthfundId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Hlthfund findById(String hlthfundId) {
        LOGGER.debug("Finding Hlthfund by id: {}", hlthfundId);
        try {
            return this.wmGenericDao.findById(hlthfundId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Hlthfund found with id: {}", hlthfundId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Hlthfund> findByMultipleIds(List<String> hlthfundIds, boolean orderedReturn) {
        LOGGER.debug("Finding Hlthfunds by ids: {}", hlthfundIds);

        return this.wmGenericDao.findByMultipleIds(hlthfundIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Hlthfund update(Hlthfund hlthfund) {
        LOGGER.debug("Updating Hlthfund with information: {}", hlthfund);

        this.wmGenericDao.update(hlthfund);
        this.wmGenericDao.refresh(hlthfund);

        return hlthfund;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Hlthfund delete(String hlthfundId) {
        LOGGER.debug("Deleting Hlthfund with id: {}", hlthfundId);
        Hlthfund deleted = this.wmGenericDao.findById(hlthfundId);
        if (deleted == null) {
            LOGGER.debug("No Hlthfund found with id: {}", hlthfundId);
            throw new EntityNotFoundException(String.valueOf(hlthfundId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Hlthfund hlthfund) {
        LOGGER.debug("Deleting Hlthfund with {}", hlthfund);
        this.wmGenericDao.delete(hlthfund);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Hlthfund> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Hlthfunds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Hlthfund> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Hlthfunds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Hlthfund to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Hlthfund to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}