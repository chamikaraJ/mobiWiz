/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Postcode;
import com.mobiwiz.cwmwsql.PostcodeId;


/**
 * ServiceImpl object for domain model class Postcode.
 *
 * @see Postcode
 */
@Service("CWmwSQL.PostcodeService")
@Validated
public class PostcodeServiceImpl implements PostcodeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostcodeServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PostcodeDao")
    private WMGenericDao<Postcode, PostcodeId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Postcode, PostcodeId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Postcode create(Postcode postcodeInstance) {
        LOGGER.debug("Creating a new Postcode with information: {}", postcodeInstance);

        Postcode postcodeInstanceCreated = this.wmGenericDao.create(postcodeInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(postcodeInstanceCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Postcode getById(PostcodeId postcodeId) {
        LOGGER.debug("Finding Postcode by id: {}", postcodeId);
        return this.wmGenericDao.findById(postcodeId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Postcode findById(PostcodeId postcodeId) {
        LOGGER.debug("Finding Postcode by id: {}", postcodeId);
        try {
            return this.wmGenericDao.findById(postcodeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Postcode found with id: {}", postcodeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Postcode> findByMultipleIds(List<PostcodeId> postcodeIds, boolean orderedReturn) {
        LOGGER.debug("Finding Postcodes by ids: {}", postcodeIds);

        return this.wmGenericDao.findByMultipleIds(postcodeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Postcode update(Postcode postcodeInstance) {
        LOGGER.debug("Updating Postcode with information: {}", postcodeInstance);

        this.wmGenericDao.update(postcodeInstance);
        this.wmGenericDao.refresh(postcodeInstance);

        return postcodeInstance;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Postcode delete(PostcodeId postcodeId) {
        LOGGER.debug("Deleting Postcode with id: {}", postcodeId);
        Postcode deleted = this.wmGenericDao.findById(postcodeId);
        if (deleted == null) {
            LOGGER.debug("No Postcode found with id: {}", postcodeId);
            throw new EntityNotFoundException(String.valueOf(postcodeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Postcode postcodeInstance) {
        LOGGER.debug("Deleting Postcode with {}", postcodeInstance);
        this.wmGenericDao.delete(postcodeInstance);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Postcode> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Postcodes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Postcode> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Postcodes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Postcode to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Postcode to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}