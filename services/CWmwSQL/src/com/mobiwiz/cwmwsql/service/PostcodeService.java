/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Postcode;
import com.mobiwiz.cwmwsql.PostcodeId;

/**
 * Service object for domain model class {@link Postcode}.
 */
public interface PostcodeService {

    /**
     * Creates a new Postcode. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Postcode if any.
     *
     * @param postcodeInstance Details of the Postcode to be created; value cannot be null.
     * @return The newly created Postcode.
     */
    Postcode create(@Valid Postcode postcodeInstance);


	/**
     * Returns Postcode by given id if exists.
     *
     * @param postcodeId The id of the Postcode to get; value cannot be null.
     * @return Postcode associated with the given postcodeId.
	 * @throws EntityNotFoundException If no Postcode is found.
     */
    Postcode getById(PostcodeId postcodeId);

    /**
     * Find and return the Postcode by given id if exists, returns null otherwise.
     *
     * @param postcodeId The id of the Postcode to get; value cannot be null.
     * @return Postcode associated with the given postcodeId.
     */
    Postcode findById(PostcodeId postcodeId);

	/**
     * Find and return the list of Postcodes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param postcodeIds The id's of the Postcode to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Postcodes associated with the given postcodeIds.
     */
    List<Postcode> findByMultipleIds(List<PostcodeId> postcodeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Postcode. It replaces all fields of the existing Postcode with the given postcodeInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Postcode if any.
     *
     * @param postcodeInstance The details of the Postcode to be updated; value cannot be null.
     * @return The updated Postcode.
     * @throws EntityNotFoundException if no Postcode is found with given input.
     */
    Postcode update(@Valid Postcode postcodeInstance);

    /**
     * Deletes an existing Postcode with the given id.
     *
     * @param postcodeId The id of the Postcode to be deleted; value cannot be null.
     * @return The deleted Postcode.
     * @throws EntityNotFoundException if no Postcode found with the given id.
     */
    Postcode delete(PostcodeId postcodeId);

    /**
     * Deletes an existing Postcode with the given object.
     *
     * @param postcodeInstance The instance of the Postcode to be deleted; value cannot be null.
     */
    void delete(Postcode postcodeInstance);

    /**
     * Find all Postcodes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Postcodes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Postcode> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Postcodes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Postcodes.
     *
     * @see Pageable
     * @see Page
     */
    Page<Postcode> findAll(String query, Pageable pageable);

    /**
     * Exports all Postcodes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Postcodes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Postcodes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Postcode.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}