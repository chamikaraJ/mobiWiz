/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Blueprnt;


/**
 * ServiceImpl object for domain model class Blueprnt.
 *
 * @see Blueprnt
 */
@Service("CWmwSQL.BlueprntService")
@Validated
public class BlueprntServiceImpl implements BlueprntService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlueprntServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.BlueprntDao")
    private WMGenericDao<Blueprnt, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Blueprnt, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Blueprnt create(Blueprnt blueprnt) {
        LOGGER.debug("Creating a new Blueprnt with information: {}", blueprnt);

        Blueprnt blueprntCreated = this.wmGenericDao.create(blueprnt);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blueprntCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Blueprnt getById(Integer blueprntId) {
        LOGGER.debug("Finding Blueprnt by id: {}", blueprntId);
        return this.wmGenericDao.findById(blueprntId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Blueprnt findById(Integer blueprntId) {
        LOGGER.debug("Finding Blueprnt by id: {}", blueprntId);
        try {
            return this.wmGenericDao.findById(blueprntId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Blueprnt found with id: {}", blueprntId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Blueprnt> findByMultipleIds(List<Integer> blueprntIds, boolean orderedReturn) {
        LOGGER.debug("Finding Blueprnts by ids: {}", blueprntIds);

        return this.wmGenericDao.findByMultipleIds(blueprntIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Blueprnt update(Blueprnt blueprnt) {
        LOGGER.debug("Updating Blueprnt with information: {}", blueprnt);

        this.wmGenericDao.update(blueprnt);
        this.wmGenericDao.refresh(blueprnt);

        return blueprnt;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Blueprnt delete(Integer blueprntId) {
        LOGGER.debug("Deleting Blueprnt with id: {}", blueprntId);
        Blueprnt deleted = this.wmGenericDao.findById(blueprntId);
        if (deleted == null) {
            LOGGER.debug("No Blueprnt found with id: {}", blueprntId);
            throw new EntityNotFoundException(String.valueOf(blueprntId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Blueprnt blueprnt) {
        LOGGER.debug("Deleting Blueprnt with {}", blueprnt);
        this.wmGenericDao.delete(blueprnt);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Blueprnt> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Blueprnts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Blueprnt> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Blueprnts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Blueprnt to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Blueprnt to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}