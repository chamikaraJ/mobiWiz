/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Ptcharacters;


/**
 * ServiceImpl object for domain model class Ptcharacters.
 *
 * @see Ptcharacters
 */
@Service("CWmwSQL.PtcharactersService")
@Validated
public class PtcharactersServiceImpl implements PtcharactersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtcharactersServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PtcharactersDao")
    private WMGenericDao<Ptcharacters, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Ptcharacters, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Ptcharacters create(Ptcharacters ptcharacters) {
        LOGGER.debug("Creating a new Ptcharacters with information: {}", ptcharacters);

        Ptcharacters ptcharactersCreated = this.wmGenericDao.create(ptcharacters);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptcharactersCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Ptcharacters getById(String ptcharactersId) {
        LOGGER.debug("Finding Ptcharacters by id: {}", ptcharactersId);
        return this.wmGenericDao.findById(ptcharactersId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Ptcharacters findById(String ptcharactersId) {
        LOGGER.debug("Finding Ptcharacters by id: {}", ptcharactersId);
        try {
            return this.wmGenericDao.findById(ptcharactersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Ptcharacters found with id: {}", ptcharactersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Ptcharacters> findByMultipleIds(List<String> ptcharactersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Ptcharacters by ids: {}", ptcharactersIds);

        return this.wmGenericDao.findByMultipleIds(ptcharactersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Ptcharacters update(Ptcharacters ptcharacters) {
        LOGGER.debug("Updating Ptcharacters with information: {}", ptcharacters);

        this.wmGenericDao.update(ptcharacters);
        this.wmGenericDao.refresh(ptcharacters);

        return ptcharacters;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Ptcharacters delete(String ptcharactersId) {
        LOGGER.debug("Deleting Ptcharacters with id: {}", ptcharactersId);
        Ptcharacters deleted = this.wmGenericDao.findById(ptcharactersId);
        if (deleted == null) {
            LOGGER.debug("No Ptcharacters found with id: {}", ptcharactersId);
            throw new EntityNotFoundException(String.valueOf(ptcharactersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Ptcharacters ptcharacters) {
        LOGGER.debug("Deleting Ptcharacters with {}", ptcharacters);
        this.wmGenericDao.delete(ptcharacters);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Ptcharacters> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ptcharacters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Ptcharacters> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ptcharacters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Ptcharacters to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Ptcharacters to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}