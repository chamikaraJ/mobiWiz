/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Roster;


/**
 * ServiceImpl object for domain model class Roster.
 *
 * @see Roster
 */
@Service("CWmwSQL.RosterService")
@Validated
public class RosterServiceImpl implements RosterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RosterServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.RosterDao")
    private WMGenericDao<Roster, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Roster, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Roster create(Roster roster) {
        LOGGER.debug("Creating a new Roster with information: {}", roster);

        Roster rosterCreated = this.wmGenericDao.create(roster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rosterCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Roster getById(String rosterIdInstance) {
        LOGGER.debug("Finding Roster by id: {}", rosterIdInstance);
        return this.wmGenericDao.findById(rosterIdInstance);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Roster findById(String rosterIdInstance) {
        LOGGER.debug("Finding Roster by id: {}", rosterIdInstance);
        try {
            return this.wmGenericDao.findById(rosterIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Roster found with id: {}", rosterIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Roster> findByMultipleIds(List<String> rosterIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Rosters by ids: {}", rosterIdInstances);

        return this.wmGenericDao.findByMultipleIds(rosterIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Roster update(Roster roster) {
        LOGGER.debug("Updating Roster with information: {}", roster);

        this.wmGenericDao.update(roster);
        this.wmGenericDao.refresh(roster);

        return roster;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Roster delete(String rosterIdInstance) {
        LOGGER.debug("Deleting Roster with id: {}", rosterIdInstance);
        Roster deleted = this.wmGenericDao.findById(rosterIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Roster found with id: {}", rosterIdInstance);
            throw new EntityNotFoundException(String.valueOf(rosterIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Roster roster) {
        LOGGER.debug("Deleting Roster with {}", roster);
        this.wmGenericDao.delete(roster);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Roster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Rosters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Roster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Rosters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Roster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Roster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}