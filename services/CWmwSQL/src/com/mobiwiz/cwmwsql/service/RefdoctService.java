/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Refdoct;

/**
 * Service object for domain model class {@link Refdoct}.
 */
public interface RefdoctService {

    /**
     * Creates a new Refdoct. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refdoct if any.
     *
     * @param refdoct Details of the Refdoct to be created; value cannot be null.
     * @return The newly created Refdoct.
     */
    Refdoct create(@Valid Refdoct refdoct);


	/**
     * Returns Refdoct by given id if exists.
     *
     * @param refdoctId The id of the Refdoct to get; value cannot be null.
     * @return Refdoct associated with the given refdoctId.
	 * @throws EntityNotFoundException If no Refdoct is found.
     */
    Refdoct getById(String refdoctId);

    /**
     * Find and return the Refdoct by given id if exists, returns null otherwise.
     *
     * @param refdoctId The id of the Refdoct to get; value cannot be null.
     * @return Refdoct associated with the given refdoctId.
     */
    Refdoct findById(String refdoctId);

	/**
     * Find and return the list of Refdocts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param refdoctIds The id's of the Refdoct to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Refdocts associated with the given refdoctIds.
     */
    List<Refdoct> findByMultipleIds(List<String> refdoctIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Refdoct. It replaces all fields of the existing Refdoct with the given refdoct.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refdoct if any.
     *
     * @param refdoct The details of the Refdoct to be updated; value cannot be null.
     * @return The updated Refdoct.
     * @throws EntityNotFoundException if no Refdoct is found with given input.
     */
    Refdoct update(@Valid Refdoct refdoct);

    /**
     * Deletes an existing Refdoct with the given id.
     *
     * @param refdoctId The id of the Refdoct to be deleted; value cannot be null.
     * @return The deleted Refdoct.
     * @throws EntityNotFoundException if no Refdoct found with the given id.
     */
    Refdoct delete(String refdoctId);

    /**
     * Deletes an existing Refdoct with the given object.
     *
     * @param refdoct The instance of the Refdoct to be deleted; value cannot be null.
     */
    void delete(Refdoct refdoct);

    /**
     * Find all Refdocts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refdocts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Refdoct> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Refdocts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refdocts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Refdoct> findAll(String query, Pageable pageable);

    /**
     * Exports all Refdocts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Refdocts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Refdocts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Refdoct.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}