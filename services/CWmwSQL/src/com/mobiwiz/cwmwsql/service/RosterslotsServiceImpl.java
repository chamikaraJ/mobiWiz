/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Rosterslots;


/**
 * ServiceImpl object for domain model class Rosterslots.
 *
 * @see Rosterslots
 */
@Service("CWmwSQL.RosterslotsService")
@Validated
public class RosterslotsServiceImpl implements RosterslotsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RosterslotsServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.RosterslotsDao")
    private WMGenericDao<Rosterslots, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Rosterslots, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Rosterslots create(Rosterslots rosterslots) {
        LOGGER.debug("Creating a new Rosterslots with information: {}", rosterslots);

        Rosterslots rosterslotsCreated = this.wmGenericDao.create(rosterslots);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rosterslotsCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Rosterslots getById(String rosterslotsId) {
        LOGGER.debug("Finding Rosterslots by id: {}", rosterslotsId);
        return this.wmGenericDao.findById(rosterslotsId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Rosterslots findById(String rosterslotsId) {
        LOGGER.debug("Finding Rosterslots by id: {}", rosterslotsId);
        try {
            return this.wmGenericDao.findById(rosterslotsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Rosterslots found with id: {}", rosterslotsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Rosterslots> findByMultipleIds(List<String> rosterslotsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Rosterslots by ids: {}", rosterslotsIds);

        return this.wmGenericDao.findByMultipleIds(rosterslotsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Rosterslots update(Rosterslots rosterslots) {
        LOGGER.debug("Updating Rosterslots with information: {}", rosterslots);

        this.wmGenericDao.update(rosterslots);
        this.wmGenericDao.refresh(rosterslots);

        return rosterslots;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Rosterslots delete(String rosterslotsId) {
        LOGGER.debug("Deleting Rosterslots with id: {}", rosterslotsId);
        Rosterslots deleted = this.wmGenericDao.findById(rosterslotsId);
        if (deleted == null) {
            LOGGER.debug("No Rosterslots found with id: {}", rosterslotsId);
            throw new EntityNotFoundException(String.valueOf(rosterslotsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Rosterslots rosterslots) {
        LOGGER.debug("Deleting Rosterslots with {}", rosterslots);
        this.wmGenericDao.delete(rosterslots);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Rosterslots> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Rosterslots");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Rosterslots> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Rosterslots");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Rosterslots to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Rosterslots to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}