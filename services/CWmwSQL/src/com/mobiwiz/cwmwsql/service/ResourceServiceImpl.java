/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Resource;


/**
 * ServiceImpl object for domain model class Resource.
 *
 * @see Resource
 */
@Service("CWmwSQL.ResourceService")
@Validated
public class ResourceServiceImpl implements ResourceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.ResourceDao")
    private WMGenericDao<Resource, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Resource, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Resource create(Resource resource) {
        LOGGER.debug("Creating a new Resource with information: {}", resource);

        Resource resourceCreated = this.wmGenericDao.create(resource);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(resourceCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Resource getById(String resourceId) {
        LOGGER.debug("Finding Resource by id: {}", resourceId);
        return this.wmGenericDao.findById(resourceId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Resource findById(String resourceId) {
        LOGGER.debug("Finding Resource by id: {}", resourceId);
        try {
            return this.wmGenericDao.findById(resourceId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Resource found with id: {}", resourceId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Resource> findByMultipleIds(List<String> resourceIds, boolean orderedReturn) {
        LOGGER.debug("Finding Resources by ids: {}", resourceIds);

        return this.wmGenericDao.findByMultipleIds(resourceIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Resource update(Resource resource) {
        LOGGER.debug("Updating Resource with information: {}", resource);

        this.wmGenericDao.update(resource);
        this.wmGenericDao.refresh(resource);

        return resource;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Resource delete(String resourceId) {
        LOGGER.debug("Deleting Resource with id: {}", resourceId);
        Resource deleted = this.wmGenericDao.findById(resourceId);
        if (deleted == null) {
            LOGGER.debug("No Resource found with id: {}", resourceId);
            throw new EntityNotFoundException(String.valueOf(resourceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Resource resource) {
        LOGGER.debug("Deleting Resource with {}", resource);
        this.wmGenericDao.delete(resource);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Resource> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Resources");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Resource> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Resources");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Resource to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Resource to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}