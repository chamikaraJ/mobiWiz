/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Refrlsrc;

/**
 * Service object for domain model class {@link Refrlsrc}.
 */
public interface RefrlsrcService {

    /**
     * Creates a new Refrlsrc. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refrlsrc if any.
     *
     * @param refrlsrc Details of the Refrlsrc to be created; value cannot be null.
     * @return The newly created Refrlsrc.
     */
    Refrlsrc create(@Valid Refrlsrc refrlsrc);


	/**
     * Returns Refrlsrc by given id if exists.
     *
     * @param refrlsrcId The id of the Refrlsrc to get; value cannot be null.
     * @return Refrlsrc associated with the given refrlsrcId.
	 * @throws EntityNotFoundException If no Refrlsrc is found.
     */
    Refrlsrc getById(String refrlsrcId);

    /**
     * Find and return the Refrlsrc by given id if exists, returns null otherwise.
     *
     * @param refrlsrcId The id of the Refrlsrc to get; value cannot be null.
     * @return Refrlsrc associated with the given refrlsrcId.
     */
    Refrlsrc findById(String refrlsrcId);

	/**
     * Find and return the list of Refrlsrcs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param refrlsrcIds The id's of the Refrlsrc to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Refrlsrcs associated with the given refrlsrcIds.
     */
    List<Refrlsrc> findByMultipleIds(List<String> refrlsrcIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Refrlsrc. It replaces all fields of the existing Refrlsrc with the given refrlsrc.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Refrlsrc if any.
     *
     * @param refrlsrc The details of the Refrlsrc to be updated; value cannot be null.
     * @return The updated Refrlsrc.
     * @throws EntityNotFoundException if no Refrlsrc is found with given input.
     */
    Refrlsrc update(@Valid Refrlsrc refrlsrc);

    /**
     * Deletes an existing Refrlsrc with the given id.
     *
     * @param refrlsrcId The id of the Refrlsrc to be deleted; value cannot be null.
     * @return The deleted Refrlsrc.
     * @throws EntityNotFoundException if no Refrlsrc found with the given id.
     */
    Refrlsrc delete(String refrlsrcId);

    /**
     * Deletes an existing Refrlsrc with the given object.
     *
     * @param refrlsrc The instance of the Refrlsrc to be deleted; value cannot be null.
     */
    void delete(Refrlsrc refrlsrc);

    /**
     * Find all Refrlsrcs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refrlsrcs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Refrlsrc> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Refrlsrcs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Refrlsrcs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Refrlsrc> findAll(String query, Pageable pageable);

    /**
     * Exports all Refrlsrcs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Refrlsrcs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Refrlsrcs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Refrlsrc.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}