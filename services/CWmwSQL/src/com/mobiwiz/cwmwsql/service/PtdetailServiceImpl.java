/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Ptdetail;


/**
 * ServiceImpl object for domain model class Ptdetail.
 *
 * @see Ptdetail
 */
@Service("CWmwSQL.PtdetailService")
@Validated
public class PtdetailServiceImpl implements PtdetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtdetailServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.PtdetailDao")
    private WMGenericDao<Ptdetail, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Ptdetail, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Ptdetail create(Ptdetail ptdetail) {
        LOGGER.debug("Creating a new Ptdetail with information: {}", ptdetail);

        Ptdetail ptdetailCreated = this.wmGenericDao.create(ptdetail);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ptdetailCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Ptdetail getById(String ptdetailId) {
        LOGGER.debug("Finding Ptdetail by id: {}", ptdetailId);
        return this.wmGenericDao.findById(ptdetailId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Ptdetail findById(String ptdetailId) {
        LOGGER.debug("Finding Ptdetail by id: {}", ptdetailId);
        try {
            return this.wmGenericDao.findById(ptdetailId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Ptdetail found with id: {}", ptdetailId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Ptdetail> findByMultipleIds(List<String> ptdetailIds, boolean orderedReturn) {
        LOGGER.debug("Finding Ptdetails by ids: {}", ptdetailIds);

        return this.wmGenericDao.findByMultipleIds(ptdetailIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Ptdetail update(Ptdetail ptdetail) {
        LOGGER.debug("Updating Ptdetail with information: {}", ptdetail);

        this.wmGenericDao.update(ptdetail);
        this.wmGenericDao.refresh(ptdetail);

        return ptdetail;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Ptdetail delete(String ptdetailId) {
        LOGGER.debug("Deleting Ptdetail with id: {}", ptdetailId);
        Ptdetail deleted = this.wmGenericDao.findById(ptdetailId);
        if (deleted == null) {
            LOGGER.debug("No Ptdetail found with id: {}", ptdetailId);
            throw new EntityNotFoundException(String.valueOf(ptdetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Ptdetail ptdetail) {
        LOGGER.debug("Deleting Ptdetail with {}", ptdetail);
        this.wmGenericDao.delete(ptdetail);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Ptdetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ptdetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Ptdetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ptdetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Ptdetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Ptdetail to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}