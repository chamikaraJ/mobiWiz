/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Refrlsrc;


/**
 * ServiceImpl object for domain model class Refrlsrc.
 *
 * @see Refrlsrc
 */
@Service("CWmwSQL.RefrlsrcService")
@Validated
public class RefrlsrcServiceImpl implements RefrlsrcService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefrlsrcServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.RefrlsrcDao")
    private WMGenericDao<Refrlsrc, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Refrlsrc, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Refrlsrc create(Refrlsrc refrlsrc) {
        LOGGER.debug("Creating a new Refrlsrc with information: {}", refrlsrc);

        Refrlsrc refrlsrcCreated = this.wmGenericDao.create(refrlsrc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refrlsrcCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Refrlsrc getById(String refrlsrcId) {
        LOGGER.debug("Finding Refrlsrc by id: {}", refrlsrcId);
        return this.wmGenericDao.findById(refrlsrcId);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Refrlsrc findById(String refrlsrcId) {
        LOGGER.debug("Finding Refrlsrc by id: {}", refrlsrcId);
        try {
            return this.wmGenericDao.findById(refrlsrcId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Refrlsrc found with id: {}", refrlsrcId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Refrlsrc> findByMultipleIds(List<String> refrlsrcIds, boolean orderedReturn) {
        LOGGER.debug("Finding Refrlsrcs by ids: {}", refrlsrcIds);

        return this.wmGenericDao.findByMultipleIds(refrlsrcIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Refrlsrc update(Refrlsrc refrlsrc) {
        LOGGER.debug("Updating Refrlsrc with information: {}", refrlsrc);

        this.wmGenericDao.update(refrlsrc);
        this.wmGenericDao.refresh(refrlsrc);

        return refrlsrc;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Refrlsrc delete(String refrlsrcId) {
        LOGGER.debug("Deleting Refrlsrc with id: {}", refrlsrcId);
        Refrlsrc deleted = this.wmGenericDao.findById(refrlsrcId);
        if (deleted == null) {
            LOGGER.debug("No Refrlsrc found with id: {}", refrlsrcId);
            throw new EntityNotFoundException(String.valueOf(refrlsrcId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Refrlsrc refrlsrc) {
        LOGGER.debug("Deleting Refrlsrc with {}", refrlsrc);
        this.wmGenericDao.delete(refrlsrc);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Refrlsrc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Refrlsrcs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Refrlsrc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Refrlsrcs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Refrlsrc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Refrlsrc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}