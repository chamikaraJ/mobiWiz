/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.cwmwsql.Doctor;


/**
 * ServiceImpl object for domain model class Doctor.
 *
 * @see Doctor
 */
@Service("CWmwSQL.DoctorService")
@Validated
public class DoctorServiceImpl implements DoctorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoctorServiceImpl.class);


    @Autowired
    @Qualifier("CWmwSQL.DoctorDao")
    private WMGenericDao<Doctor, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Doctor, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Doctor create(Doctor doctor) {
        LOGGER.debug("Creating a new Doctor with information: {}", doctor);

        Doctor doctorCreated = this.wmGenericDao.create(doctor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(doctorCreated);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Doctor getById(String doctorIdInstance) {
        LOGGER.debug("Finding Doctor by id: {}", doctorIdInstance);
        return this.wmGenericDao.findById(doctorIdInstance);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Doctor findById(String doctorIdInstance) {
        LOGGER.debug("Finding Doctor by id: {}", doctorIdInstance);
        try {
            return this.wmGenericDao.findById(doctorIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Doctor found with id: {}", doctorIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public List<Doctor> findByMultipleIds(List<String> doctorIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Doctors by ids: {}", doctorIdInstances);

        return this.wmGenericDao.findByMultipleIds(doctorIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CWmwSQLTransactionManager")
    @Override
    public Doctor update(Doctor doctor) {
        LOGGER.debug("Updating Doctor with information: {}", doctor);

        this.wmGenericDao.update(doctor);
        this.wmGenericDao.refresh(doctor);

        return doctor;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public Doctor delete(String doctorIdInstance) {
        LOGGER.debug("Deleting Doctor with id: {}", doctorIdInstance);
        Doctor deleted = this.wmGenericDao.findById(doctorIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Doctor found with id: {}", doctorIdInstance);
            throw new EntityNotFoundException(String.valueOf(doctorIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CWmwSQLTransactionManager")
    @Override
    public void delete(Doctor doctor) {
        LOGGER.debug("Deleting Doctor with {}", doctor);
        this.wmGenericDao.delete(doctor);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Doctor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Doctors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Doctor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Doctors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Doctor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CWmwSQL for table Doctor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CWmwSQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}