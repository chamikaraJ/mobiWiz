/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobiwiz.cwmwsql.Ptdetail;
import com.mobiwiz.cwmwsql.service.PtdetailService;


/**
 * Controller object for domain model class Ptdetail.
 * @see Ptdetail
 */
@RestController("CWmwSQL.PtdetailController")
@Api(value = "PtdetailController", description = "Exposes APIs to work with Ptdetail resource.")
@RequestMapping("/CWmwSQL/Ptdetail")
public class PtdetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PtdetailController.class);

    @Autowired
	@Qualifier("CWmwSQL.PtdetailService")
	private PtdetailService ptdetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Ptdetail instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ptdetail createPtdetail(@RequestBody Ptdetail ptdetail) {
		LOGGER.debug("Create Ptdetail with information: {}" , ptdetail);

		ptdetail = ptdetailService.create(ptdetail);
		LOGGER.debug("Created Ptdetail with information: {}" , ptdetail);

	    return ptdetail;
	}

    @ApiOperation(value = "Returns the Ptdetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ptdetail getPtdetail(@PathVariable("id") String id) {
        LOGGER.debug("Getting Ptdetail with id: {}" , id);

        Ptdetail foundPtdetail = ptdetailService.getById(id);
        LOGGER.debug("Ptdetail details with id: {}" , foundPtdetail);

        return foundPtdetail;
    }

    @ApiOperation(value = "Updates the Ptdetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ptdetail editPtdetail(@PathVariable("id") String id, @RequestBody Ptdetail ptdetail) {
        LOGGER.debug("Editing Ptdetail with id: {}" , ptdetail.getPatientNo());

        ptdetail.setPatientNo(id);
        ptdetail = ptdetailService.update(ptdetail);
        LOGGER.debug("Ptdetail details with id: {}" , ptdetail);

        return ptdetail;
    }

    @ApiOperation(value = "Deletes the Ptdetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePtdetail(@PathVariable("id") String id) {
        LOGGER.debug("Deleting Ptdetail with id: {}" , id);

        Ptdetail deletedPtdetail = ptdetailService.delete(id);

        return deletedPtdetail != null;
    }

    /**
     * @deprecated Use {@link #findPtdetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Ptdetail instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ptdetail> searchPtdetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Ptdetails list by query filter:{}", (Object) queryFilters);
        return ptdetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ptdetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ptdetail> findPtdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ptdetails list by filter:", query);
        return ptdetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ptdetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ptdetail> filterPtdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ptdetails list by filter", query);
        return ptdetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPtdetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ptdetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPtdetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Ptdetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ptdetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Ptdetail instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPtdetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Ptdetails");
		return ptdetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPtdetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ptdetailService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PtdetailService instance
	 */
	protected void setPtdetailService(PtdetailService service) {
		this.ptdetailService = service;
	}

}