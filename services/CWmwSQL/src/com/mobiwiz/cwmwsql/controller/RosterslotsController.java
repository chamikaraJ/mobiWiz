/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobiwiz.cwmwsql.Rosterslots;
import com.mobiwiz.cwmwsql.service.RosterslotsService;


/**
 * Controller object for domain model class Rosterslots.
 * @see Rosterslots
 */
@RestController("CWmwSQL.RosterslotsController")
@Api(value = "RosterslotsController", description = "Exposes APIs to work with Rosterslots resource.")
@RequestMapping("/CWmwSQL/Rosterslots")
public class RosterslotsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RosterslotsController.class);

    @Autowired
	@Qualifier("CWmwSQL.RosterslotsService")
	private RosterslotsService rosterslotsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Rosterslots instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rosterslots createRosterslots(@RequestBody Rosterslots rosterslots) {
		LOGGER.debug("Create Rosterslots with information: {}" , rosterslots);

		rosterslots = rosterslotsService.create(rosterslots);
		LOGGER.debug("Created Rosterslots with information: {}" , rosterslots);

	    return rosterslots;
	}

    @ApiOperation(value = "Returns the Rosterslots instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rosterslots getRosterslots(@PathVariable("id") String id) {
        LOGGER.debug("Getting Rosterslots with id: {}" , id);

        Rosterslots foundRosterslots = rosterslotsService.getById(id);
        LOGGER.debug("Rosterslots details with id: {}" , foundRosterslots);

        return foundRosterslots;
    }

    @ApiOperation(value = "Updates the Rosterslots instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rosterslots editRosterslots(@PathVariable("id") String id, @RequestBody Rosterslots rosterslots) {
        LOGGER.debug("Editing Rosterslots with id: {}" , rosterslots.getUniqcalid());

        rosterslots.setUniqcalid(id);
        rosterslots = rosterslotsService.update(rosterslots);
        LOGGER.debug("Rosterslots details with id: {}" , rosterslots);

        return rosterslots;
    }

    @ApiOperation(value = "Deletes the Rosterslots instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRosterslots(@PathVariable("id") String id) {
        LOGGER.debug("Deleting Rosterslots with id: {}" , id);

        Rosterslots deletedRosterslots = rosterslotsService.delete(id);

        return deletedRosterslots != null;
    }

    /**
     * @deprecated Use {@link #findRosterslots(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Rosterslots instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rosterslots> searchRosterslotsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Rosterslots list by query filter:{}", (Object) queryFilters);
        return rosterslotsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rosterslots instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rosterslots> findRosterslots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Rosterslots list by filter:", query);
        return rosterslotsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rosterslots instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rosterslots> filterRosterslots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Rosterslots list by filter", query);
        return rosterslotsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRosterslots(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return rosterslotsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRosterslotsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Rosterslots.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> rosterslotsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Rosterslots instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRosterslots( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Rosterslots");
		return rosterslotsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRosterslotsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return rosterslotsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RosterslotsService instance
	 */
	protected void setRosterslotsService(RosterslotsService service) {
		this.rosterslotsService = service;
	}

}