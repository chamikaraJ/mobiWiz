/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.cwmwsql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobiwiz.cwmwsql.Postcode;
import com.mobiwiz.cwmwsql.PostcodeId;
import com.mobiwiz.cwmwsql.service.PostcodeService;


/**
 * Controller object for domain model class Postcode.
 * @see Postcode
 */
@RestController("CWmwSQL.PostcodeController")
@Api(value = "PostcodeController", description = "Exposes APIs to work with Postcode resource.")
@RequestMapping("/CWmwSQL/Postcode")
public class PostcodeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostcodeController.class);

    @Autowired
	@Qualifier("CWmwSQL.PostcodeService")
	private PostcodeService postcodeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Postcode instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Postcode createPostcode(@RequestBody Postcode postcodeInstance) {
		LOGGER.debug("Create Postcode with information: {}" , postcodeInstance);

		postcodeInstance = postcodeService.create(postcodeInstance);
		LOGGER.debug("Created Postcode with information: {}" , postcodeInstance);

	    return postcodeInstance;
	}

    @ApiOperation(value = "Returns the Postcode instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Postcode getPostcode(@RequestParam("areaname") String areaname, @RequestParam("postcode") String postcode, @RequestParam("state") String state) {

        PostcodeId postcodeId = new PostcodeId();
        postcodeId.setAreaname(areaname);
        postcodeId.setPostcode(postcode);
        postcodeId.setState(state);

        LOGGER.debug("Getting Postcode with id: {}" , postcodeId);
        Postcode postcodeInstance = postcodeService.getById(postcodeId);
        LOGGER.debug("Postcode details with id: {}" , postcodeInstance);

        return postcodeInstance;
    }



    @ApiOperation(value = "Updates the Postcode instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Postcode editPostcode(@RequestParam("areaname") String areaname, @RequestParam("postcode") String postcode, @RequestParam("state") String state, @RequestBody Postcode postcodeInstance) {

        postcodeInstance.setAreaname(areaname);
        postcodeInstance.setPostcode(postcode);
        postcodeInstance.setState(state);

        LOGGER.debug("Postcode details with id is updated with: {}" , postcodeInstance);

        return postcodeService.update(postcodeInstance);
    }


    @ApiOperation(value = "Deletes the Postcode instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePostcode(@RequestParam("areaname") String areaname, @RequestParam("postcode") String postcode, @RequestParam("state") String state) {

        PostcodeId postcodeId = new PostcodeId();
        postcodeId.setAreaname(areaname);
        postcodeId.setPostcode(postcode);
        postcodeId.setState(state);

        LOGGER.debug("Deleting Postcode with id: {}" , postcodeId);
        Postcode postcodeInstance = postcodeService.delete(postcodeId);

        return postcodeInstance != null;
    }


    /**
     * @deprecated Use {@link #findPostcodes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Postcode instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Postcode> searchPostcodesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Postcodes list by query filter:{}", (Object) queryFilters);
        return postcodeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Postcode instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Postcode> findPostcodes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Postcodes list by filter:", query);
        return postcodeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Postcode instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Postcode> filterPostcodes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Postcodes list by filter", query);
        return postcodeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPostcodes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return postcodeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPostcodesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Postcode.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> postcodeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Postcode instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPostcodes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Postcodes");
		return postcodeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPostcodeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return postcodeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PostcodeService instance
	 */
	protected void setPostcodeService(PostcodeService service) {
		this.postcodeService = service;
	}

}