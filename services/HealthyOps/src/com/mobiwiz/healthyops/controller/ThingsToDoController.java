/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.healthyops.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobiwiz.healthyops.ThingsToDo;
import com.mobiwiz.healthyops.service.ThingsToDoService;


/**
 * Controller object for domain model class ThingsToDo.
 * @see ThingsToDo
 */
@RestController("HealthyOps.ThingsToDoController")
@Api(value = "ThingsToDoController", description = "Exposes APIs to work with ThingsToDo resource.")
@RequestMapping("/HealthyOps/ThingsToDo")
public class ThingsToDoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThingsToDoController.class);

    @Autowired
	@Qualifier("HealthyOps.ThingsToDoService")
	private ThingsToDoService thingsToDoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ThingsToDo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ThingsToDo createThingsToDo(@RequestBody ThingsToDo thingsToDo) {
		LOGGER.debug("Create ThingsToDo with information: {}" , thingsToDo);

		thingsToDo = thingsToDoService.create(thingsToDo);
		LOGGER.debug("Created ThingsToDo with information: {}" , thingsToDo);

	    return thingsToDo;
	}

    @ApiOperation(value = "Returns the ThingsToDo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ThingsToDo getThingsToDo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ThingsToDo with id: {}" , id);

        ThingsToDo foundThingsToDo = thingsToDoService.getById(id);
        LOGGER.debug("ThingsToDo details with id: {}" , foundThingsToDo);

        return foundThingsToDo;
    }

    @ApiOperation(value = "Updates the ThingsToDo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ThingsToDo editThingsToDo(@PathVariable("id") Integer id, @RequestBody ThingsToDo thingsToDo) {
        LOGGER.debug("Editing ThingsToDo with id: {}" , thingsToDo.getId());

        thingsToDo.setId(id);
        thingsToDo = thingsToDoService.update(thingsToDo);
        LOGGER.debug("ThingsToDo details with id: {}" , thingsToDo);

        return thingsToDo;
    }

    @ApiOperation(value = "Deletes the ThingsToDo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteThingsToDo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ThingsToDo with id: {}" , id);

        ThingsToDo deletedThingsToDo = thingsToDoService.delete(id);

        return deletedThingsToDo != null;
    }

    /**
     * @deprecated Use {@link #findThingsToDos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ThingsToDo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ThingsToDo> searchThingsToDosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ThingsToDos list by query filter:{}", (Object) queryFilters);
        return thingsToDoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ThingsToDo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ThingsToDo> findThingsToDos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ThingsToDos list by filter:", query);
        return thingsToDoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ThingsToDo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ThingsToDo> filterThingsToDos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ThingsToDos list by filter", query);
        return thingsToDoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportThingsToDos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return thingsToDoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportThingsToDosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ThingsToDo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> thingsToDoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ThingsToDo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countThingsToDos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ThingsToDos");
		return thingsToDoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getThingsToDoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return thingsToDoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ThingsToDoService instance
	 */
	protected void setThingsToDoService(ThingsToDoService service) {
		this.thingsToDoService = service;
	}

}