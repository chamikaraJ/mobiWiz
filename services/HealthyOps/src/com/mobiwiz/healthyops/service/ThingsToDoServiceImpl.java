/*Copyright (c) 2015-2016 medicalwizard.com.au All Rights Reserved.
 This software is the confidential and proprietary information of medicalwizard.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with medicalwizard.com.au*/
package com.mobiwiz.healthyops.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobiwiz.healthyops.ThingsToDo;


/**
 * ServiceImpl object for domain model class ThingsToDo.
 *
 * @see ThingsToDo
 */
@Service("HealthyOps.ThingsToDoService")
@Validated
public class ThingsToDoServiceImpl implements ThingsToDoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ThingsToDoServiceImpl.class);


    @Autowired
    @Qualifier("HealthyOps.ThingsToDoDao")
    private WMGenericDao<ThingsToDo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ThingsToDo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HealthyOpsTransactionManager")
    @Override
    public ThingsToDo create(ThingsToDo thingsToDo) {
        LOGGER.debug("Creating a new ThingsToDo with information: {}", thingsToDo);

        ThingsToDo thingsToDoCreated = this.wmGenericDao.create(thingsToDo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(thingsToDoCreated);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public ThingsToDo getById(Integer thingstodoId) {
        LOGGER.debug("Finding ThingsToDo by id: {}", thingstodoId);
        return this.wmGenericDao.findById(thingstodoId);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public ThingsToDo findById(Integer thingstodoId) {
        LOGGER.debug("Finding ThingsToDo by id: {}", thingstodoId);
        try {
            return this.wmGenericDao.findById(thingstodoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ThingsToDo found with id: {}", thingstodoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public List<ThingsToDo> findByMultipleIds(List<Integer> thingstodoIds, boolean orderedReturn) {
        LOGGER.debug("Finding ThingsToDos by ids: {}", thingstodoIds);

        return this.wmGenericDao.findByMultipleIds(thingstodoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "HealthyOpsTransactionManager")
    @Override
    public ThingsToDo update(ThingsToDo thingsToDo) {
        LOGGER.debug("Updating ThingsToDo with information: {}", thingsToDo);

        this.wmGenericDao.update(thingsToDo);
        this.wmGenericDao.refresh(thingsToDo);

        return thingsToDo;
    }

    @Transactional(value = "HealthyOpsTransactionManager")
    @Override
    public ThingsToDo delete(Integer thingstodoId) {
        LOGGER.debug("Deleting ThingsToDo with id: {}", thingstodoId);
        ThingsToDo deleted = this.wmGenericDao.findById(thingstodoId);
        if (deleted == null) {
            LOGGER.debug("No ThingsToDo found with id: {}", thingstodoId);
            throw new EntityNotFoundException(String.valueOf(thingstodoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "HealthyOpsTransactionManager")
    @Override
    public void delete(ThingsToDo thingsToDo) {
        LOGGER.debug("Deleting ThingsToDo with {}", thingsToDo);
        this.wmGenericDao.delete(thingsToDo);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public Page<ThingsToDo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ThingsToDos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public Page<ThingsToDo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ThingsToDos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HealthyOps for table ThingsToDo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service HealthyOps for table ThingsToDo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HealthyOpsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}